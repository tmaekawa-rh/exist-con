import sys
import os
import configparser
import requests
import pandas as pd
import xml.etree.ElementTree as ET
import hashlib
from io import StringIO
from datetime import datetime, timezone

## Django Setup
import django
import pymysql
pymysql.install_as_MySQLdb()
conffile = os.path.join(os.path.dirname(__file__), "../../conf/insert2db.conf")
conf = configparser.SafeConfigParser()
conf.read(conffile)
sys.path.append(conf.get('exist', 'syspath'))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'intelligence.settings')
django.setup()
from apps.exploit.models import Exploit
import django.utils.timezone as tzone
from django.db import IntegrityError

## Logger Setup
from logging import getLogger, DEBUG, NullHandler
logger = getLogger(__name__)
logger.addHandler(NullHandler())
logger.setLevel(DEBUG)
logger.propagate = True

DataDir = os.path.join(os.path.dirname(__file__), '../data/')

class Tracker():
    def __init__(self):
        self.name = 'CXSecurity'
        self.ID = 101
        self.URL = 'https://cxsecurity.com/wlb/rss/exploit/'
        self.DataFilePath = DataDir + 'cx/index.html'
        self.header = [
            'title',
            'link',
            'guid',
            'lastBuildDate',
            'dc:creator',
            'description',
            'pubDate',
        ]

    def fetchCXText(self, guid):
        filepath = DataDir + "cx/data/" + guid
        if os.path.exists(filepath):
            return open(filepath).read().split("</HEAD><BODY><PRE>")[1].split("</PRE></BODY></HTML>")[0]
        url = "https://cxsecurity.com/ascii/{id}".format(id=guid)
        try:
            res = requests.get(url)
        except Exception as e:
            logger.error(e)
        if not res.text == '':
            open(filepath, 'w').write(res.text)
        text = open(filepath).read().split("</HEAD><BODY><PRE>")[1].split("</PRE></BODY></HTML>")[0]
        return text

    def makeDataFrame(self):
        try:
            res = requests.get(self.URL)
        except Exception as e:
            logger.error(e)
        if not res.text == '':
            open(self.DataFilePath, 'w').write(res.text)
        xml_data = open(self.DataFilePath).read()
        root = ET.XML(xml_data)
        all_records = []
        for child in root[0]:
            if child.tag == 'item':
                record = {}
                for subchild in child:
                    record[subchild.tag] = subchild.text
                all_records.append(record)
        df = pd.DataFrame(all_records)
        return df

    def parse(self):
        logger.info("start parsing: %s", self.name)

        df = self.makeDataFrame()
        queries = []
        if df.empty:
            logger.info("no update")
            return queries

        for i, v in df.iterrows():
            line = str(self.ID) + ","
            line += str(v.values)
            md5 = hashlib.md5(line.encode('utf-8')).hexdigest()
            try:
                query = Exploit(
                    id = md5,
                    title = v.title,
                    description = v.description[:254],
                    referrer = v.link,
                    datetime = datetime.strptime(v.pubDate, '%a, %d %b %Y %H:%M:%S %z'),
                    text = self.fetchCXText(v.guid),
                    source = self.ID,
                )
            except Exception as e:
                logger.error("%s: %s", e, line)
            queries.append(query)

        logger.info("done parsing: %s, %s queries were parsed", self.name, len(queries))
        return queries
